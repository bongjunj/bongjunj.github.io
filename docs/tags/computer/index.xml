<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Computer on Bongjun Jang</title>
    <link>https://bongjunj.github.io/tags/computer/</link>
    <description>Recent content in Computer on Bongjun Jang</description>
    <generator>Hugo</generator>
    <language>ko</language>
    <managingEditor>bongjun.jang [at] kaist.ac.kr (Bongjun Jang)</managingEditor>
    <webMaster>bongjun.jang [at] kaist.ac.kr (Bongjun Jang)</webMaster>
    <lastBuildDate>Sun, 29 Aug 2021 12:37:24 +0900</lastBuildDate>
    <atom:link href="https://bongjunj.github.io/tags/computer/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>쿠키런 킹덤 서버 아키텍처 1</title>
      <link>https://bongjunj.github.io/posts/cookie-run-kingdom-server-architecture-1/</link>
      <pubDate>Sun, 29 Aug 2021 12:37:24 +0900</pubDate><author>bongjun.jang [at] kaist.ac.kr (Bongjun Jang)</author>
      <guid>https://bongjunj.github.io/posts/cookie-run-kingdom-server-architecture-1/</guid>
      <description>&lt;p&gt;Actor Model에 대해서 정리하며 포스트를 쓰려다가 예전에 봤던 &lt;a href=&#34;https://www.youtube.com/watch?v=FUEZibcZEkg&#34;&gt;NDC21-프로그래밍, 쿠키런 킹덤 서버 아키텍처 뜯어먹기&lt;/a&gt;가 떠올라서 리뷰해보려고 한다.&#xA;서버 아키텍처에 대해 많은 내용을 배울 수 있는 자료라서 좋은 공부가 될 것 같다.&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;    &lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;&#xA;      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;allowfullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/FUEZibcZEkg?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;[NDC21-프로그래밍] 〈쿠키런: 킹덤〉 서버 아키텍처 뜯어먹기!&#34;&#xA;      &gt;&lt;/iframe&gt;&#xA;    &lt;/div&gt;&#xA;&#xA;&lt;p&gt;일단 영상의 주요 내용은 다음과 같다. (영상 1분 16초 참고)&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Stateful vs. Stateless, and Actor Model&lt;/li&gt;&#xA;&lt;li&gt;CRUD vs. Event Sourcing&lt;/li&gt;&#xA;&lt;li&gt;함수형 프로그래밍과 DSL로 콘텐츠 구현&lt;/li&gt;&#xA;&lt;li&gt;유저간 상호 작용 구현하기: 2PC vs. SAGA&lt;/li&gt;&#xA;&lt;li&gt;이벤트 기반 아키텍처를 바탕으로 확장하기&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;이번 포스트에서는 첫번째 내용을 다뤄보려고 한다.&#xA;첫번째 내용만 해도 다룰 이야기가 참 많다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>컴퓨터와 시간</title>
      <link>https://bongjunj.github.io/posts/computer-and-time/</link>
      <pubDate>Sat, 28 Aug 2021 12:35:23 +0900</pubDate><author>bongjun.jang [at] kaist.ac.kr (Bongjun Jang)</author>
      <guid>https://bongjunj.github.io/posts/computer-and-time/</guid>
      <description>&lt;figure&gt;&#xA;  &lt;center&gt;&#xA;    &lt;img&#xA;      srcset=&#39;&#xA;    /posts/computer-and-time/pat_sync_hu15267781798033968347.jpg 320w,&#xA;    /posts/computer-and-time/pat_sync_hu6411697782156098745.jpg 600w,&#xA;    /posts/computer-and-time/pat_sync_hu14209291878614924466.jpg 900w,&#xA;    /posts/computer-and-time/pat_sync_hu871492035835143153.jpg 1200x&#39;&#xA;      sizes=&#34;(max-width: 320px) 280px, (max-width: 600px) 560px, 800px&#34;&#xA;      src=&#39;https://bongjunj.github.io/posts/computer-and-time/pat_sync_hu6411697782156098745.jpg&#39;&#xA;      alt=&#34;&#34;&#xA;    /&gt;&#xA;    &lt;figcaption&gt;&#xA;      &lt;p&gt;&lt;/p&gt;&#xA;    &lt;/figcaption&gt;&#xA;  &lt;/center&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&#xA;&lt;h1 id=&#34;거대한-시차&#34;&gt;거대한 시차&lt;/h1&gt;&#xA;&lt;p&gt;해외로 가는 비행기표를 찾아볼 때 우리는 우리의 표준시와 도착지의 표준시를 비교한다.&#xA;서울은 뉴욕보다 14시간 빠르다.&#xA;일광절약제가 적용되는 때에는 13시간 빠르다.&#xA;그래서 인천에서 출발할 때의 시각은 한국표준시로 읽고 뉴욕에 도착할 때의 시각은 동부시간대로 읽는다.&#xA;지구 상에 어디에 있든, 시간대는 아주 정확하게 구분되어 있고 일정한 간격으로 흘러가고 있다.&lt;/p&gt;&#xA;&lt;p&gt;현대 사회에서 시각을 읽는 것은 아주 쉬운 일이다.&#xA;스마트 워치를 사용하거나, 스마트폰을 열거나 랩탑이나 데스크탑을 키면 1초단위로 시각을 아주 정확하게 보여준다.&#xA;콘서트 티케팅이나 대학 수강신청처럼 1초 단위로 희비가 갈리는 이벤트에 있어서도&#xA;다들 디지털 시계를 가지고 있기 때문에 티케팅 서버나 대학 서버 시각을 정확하게 맞춰서 접속할 수 있다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
